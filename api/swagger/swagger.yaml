swagger: "2.0"
info:
  version: "0.1.0"
  title: DataSourceAPI
# during dev, should point to your local machine
host: localhost:8080
# basePath prefixes all resource paths 
basePath: /api
# 
schemes:
  # tip: remove http to make production-grade
  - http
  # - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /swagger:
    x-swagger-pipe: swagger_raw
    
  /adapters:
    x-swagger-router-controller: adapters
    get:
      description: Return a list of Adapters available.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Adapter"
  
  /adapters/reload:
    x-swagger-router-controller: adapters
    post:
      description: Request adapters to be reloaded. Needed if a new adapter is installed.
      operationId: reloadAdapters
      parameters:
        - $ref: "#/parameters/emptyParam"
      responses:
        200:
          description: Return how many adapters are loaded.
          schema:
            $ref: "#/definitions/CountSchema"
  
  /datasources:
    get:
      description: Return all `DataSource`
      parameters:
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/skipParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/queryParam"
        - $ref: "#/parameters/selectParam"
        - $ref: "#/parameters/distinctParam"
      responses:
        200: 
          description: Success
          schema: 
            type: array
            items:
              $ref: "#/definitions/DataSource"
    post:
      description: Create new DataSource and configures it.
      parameters:
        - name: DataSource
          in: body
          required: true
          schema:
            $ref: "#/definitions/DataSource"
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/DataSource"
    
  
  /datasources/count:
    get:
      description: Count how many entities are in db.
      responses: 
        200:
          description: Success
          schema:
            $ref: "#/definitions/CountSchema"
  
  /datasources_status/:
    x-swagger-router-controller: executor
    get:
      operationId: getAllStatus
      description: Give status of the DataSources like connection errors.
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Status"
            
  /datasources/{_id}:
    get:
      description: Get one entity
      parameters:
        - $ref: "#/parameters/idParam"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/DataSource"
    delete:
      parameters:
        - $ref: "#/parameters/idParam"
      description: Delete one entity.
      responses:
        200:
          description: OK
    patch:
      description: Update an entity
      parameters:
        - name: DataSource
          in: body
          required: true
          schema:
            $ref: "#/definitions/DataSource"
        - $ref: "#/parameters/idParam"
      responses:
        200:
          description: OK
          
  /datasources/{_id}/execute:
    x-swagger-router-controller: executor
    post:
      description: Execute a query on a dataSource. The body contains the queryProperties necessary for the adapter.
      operationId: executeDataSource
      parameters:
        - $ref: "#/parameters/idParam"
        - name: bodyParams
          in: body
          schema:
            properties:
              queryProperties:
                description: Query adapter properties. It will depends on the DataSource
                type: object
              parameters:
                description: |
                  Key value Parameters to be replaced in the queryProperties.
                  Example: {"param1" : 123, "param2" : "all", ...}
                type: object
      responses:
        200:
          description: Result of the query
          
  /datasources/{_id}/status:
    x-swagger-router-controller: executor
    get:
      description: Get a datasource configuration status
      operationId: getStatus
      parameters:
        - $ref: "#/parameters/idParam"
      responses:
        200:
          description: Status of the datasource
          schema:
            $ref: "#/definitions/Status"
    
  /queries:
    get:
      description: Return all `Query`
      parameters:
        - $ref: "#/parameters/sortParam"
        - $ref: "#/parameters/skipParam"
        - $ref: "#/parameters/limitParam"
        - $ref: "#/parameters/queryParam"
        - $ref: "#/parameters/selectParam"
        - $ref: "#/parameters/distinctParam"
      responses:
        200: 
          description: Success
          schema: 
            type: array
            items:
              $ref: "#/definitions/Query"
    post:
      description: Create new entity
      parameters:
        - name: Query
          in: body
          required: true
          schema:
            $ref: "#/definitions/Query"
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/Query"

    
  
  /queries/count:
    get:
      description: Count how many entities are in db.
      responses: 
        200:
          description: Success
          schema:
            $ref: "#/definitions/CountSchema"
            
  /queries/{_id}:
    get:
      description: Get one entity
      parameters:
        - $ref: "#/parameters/idParam"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Query"
    delete:
      parameters:
        - $ref: "#/parameters/idParam"
      description: Delete one entity.
      responses:
        200:
          description: OK
    patch:
      description: Update an entity
      parameters:
        - name: Query
          in: body
          required: true
          schema:
            $ref: "#/definitions/Query"
        - $ref: "#/parameters/idParam"
      responses:
        200:
          description: OK
          
  /queries/{_id}/execute:
    x-swagger-router-controller: executor
    post:
      description: Execute a query and return the data.
      operationId: executeQuery
      parameters:
        - $ref: "#/parameters/idParam"
        - name: bodyParams
          in: body
          schema:
            properties:
              parameters:
                description: |
                  Key value Parameters to be replaced in the queryProperties.
                  Example: {"param1" : 123, "param2" : "all", ...}
                type: object
      responses:
        200:
          description: Result of the query
      

    
# complex objects have schema definitions
definitions:
  CountSchema:
    properties:
      count:
        type: integer

  Adapter:
    properties:
      name:
        type: string
        description: Name to be set to Datasources.
      displayName:
        type: string
        description: User friendly name to display.
      dataSourcePropertiesSchema:
        type: object
        description: Properties of the adapter that should be provided by DataSources. MongooseSchema
      queryPropertiesSchema:
        type: object
        description: Properties of the adapter queries, should be provided by Queries. MongooseSchema
      aditionalProperties:
        description: Aditional properties for application uses. 
        type: object
      
        
  DataSource:
    required:
      - name
      - adapter
    properties:
      name:
        type: string
      adapter:
        description: Adapter name
        type: string
      dataSourceProperties:
        type: object
      aditionalProperties:
        description: Aditional properties for application uses. 
        type: object
        
  Query:
    required:
      - name
      - dataSource
    properties:
      name:
        type: string
      dataSource:
        description: DataSource id
        type: string
      queryProperties:
        type: object
      aditionalProperties:
        description: Aditional properties for application uses. 
        type: object
        
  Status:
    properties:
      ok:
        type: boolean
      date:
        type: string
        format: date-time
      error:
        type: object

parameters:
  idParam:
    name: _id
    in: path
    required: true
    type: string
    
  sortParam:
    name: sort
    in: query
    description: | 
      Sort entities by an attribute.
      Example: sort=name, sort=-name, sort={"name":-1}
    required: false
    type: string
    
  skipParam:
    name: skip
    in: query
    description: | 
      Number of entities to be skipped, like an offset.
      Example: skip=10
    required: false
    type: integer
    
  limitParam:
    name: limit
    in: query
    description: | 
      Limit number of entities returned
      Example: limit=10
    required: false
    type: integer
    
  queryParam:
    name: query
    in: query
    description: | 
      A MongoDB query.
      Example: query={"age":"<=12"}
    required: false
    type: string
  
  selectParam:
    name: select
    in: query
    description: | 
      Select attributes to be show or hidden
      Example: select=name,createdAt
    required: false
    type: string
  
  distinctParam:
    name: distinct
    in: query
    description: | 
      Attribute to be distinct
      Example: distinct=name
    required: false
    type: string
  
  emptyParam:
    name: empty
    in: body
    required: false
    schema:
      type: object